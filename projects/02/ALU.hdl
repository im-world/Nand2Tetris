// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Put you code here:

    //Preprocessing
    Not(in = zx, out = zxBar);
    Not(in = zy, out = zyBar);
    And16(a = x, b[0] = zxBar, b[1] = zxBar, b[2] = zxBar, b[3] = zxBar, b[4] = zxBar, b[5] = zxBar, b[6] = zxBar, b[7] = zxBar, b[8] = zxBar, b[9] = zxBar, b[10] = zxBar, b[11] = zxBar, b[12] = zxBar, b[13] = zxBar, b[14] = zxBar, b[15] = zxBar, out = x1);
    // No syntax for broadcasting - https://www.coursera.org/learn/build-a-computer/discussions/forums/aJH9vyj3Eea7jBLLHPwd0w/threads/sQru-s81EeiJawp1gpDtpA
    Not16(in = x1, out = x1Bar);
    Mux16(a = x1, b = x1Bar, sel = nx, out = xFinal);

    And16(a = y, b[0] = zyBar, b[1] = zyBar, b[2] = zyBar, b[3] = zyBar, b[4] = zyBar, b[5] = zyBar, b[6] = zyBar, b[7] = zyBar, b[8] = zyBar, b[9] = zyBar, b[10] = zyBar, b[11] = zyBar, b[12] = zyBar, b[13] = zyBar, b[14] = zyBar, b[15] = zyBar, out = y1);
    Not16(in = y1, out = y1Bar);
    Mux16(a = y1, b = y1Bar, sel = ny, out = yFinal);


    //Processing
    And16(a = xFinal, b = yFinal, out = andSignal);
    Add16(a = xFinal, b = yFinal, out = addSignal);
    Mux16(a = andSignal, b = addSignal, sel = f, out = outSignal);

    //Post-processing
    Not16(in = outSignal, out = outSignalBar);
    Mux16(a = outSignal, b = outSignalBar, sel = no, out = out);
    Mux16(a = outSignal, b = outSignalBar, sel = no, out[0..7] = outDummy07, out[8..14] = outDummy814, out[15] = outDummy15);

    Or8Way(in = outDummy07, out = zrInterm1);    //Is output accessible? - No
    Or8Way(in[0..6] = outDummy814, in[7] = outDummy15, out = zrInterm2);
    Or(a = zrInterm1, b = zrInterm2, out = zrBar);
    Not(in = zrBar, out = zr);

    And(a = outDummy15, b = true, out = ng);
}